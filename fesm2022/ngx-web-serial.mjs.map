{"version":3,"file":"ngx-web-serial.mjs","sources":["../../../projects/ngx-web-serial/src/lib/mock-serial.ts","../../../projects/ngx-web-serial/src/lib/ngx-web-serial.service.ts","../../../projects/ngx-web-serial/src/public-api.ts","../../../projects/ngx-web-serial/src/ngx-web-serial.ts"],"sourcesContent":["export class MockSerial {\n  private readableController: ReadableStreamDefaultController<Uint8Array> | null = null;\n  readonly responseFunction: (input: string) => string;\n  readonly readableStream: ReadableStream<Uint8Array>;\n  constructor(responseFunction: (input: string) => string) {\n    this.responseFunction = responseFunction;\n    this.readableStream = new ReadableStream({\n      start: (controller) => {\n        this.readableController = controller;\n      },\n      cancel: () => {\n        this.readableController = null;\n      }\n    });\n  }\n\n  requestPort(options?: SerialPortRequestOptions): Promise<SerialPort> {\n    return Promise.resolve({\n      open: () => Promise.resolve(),\n      close: () => this.readableStream.cancel(),\n      readable: this.readableStream,\n      writable: new WritableStream({\n        write: (chunk) => {\n          const input = new TextDecoder().decode(chunk);\n          const response = this.responseFunction(input);\n          if (this.readableController) {\n            this.readableController.enqueue(new TextEncoder().encode(response));\n          }\n        }\n      })\n    } as any as SerialPort);\n  }\n}\n","import { FactoryProvider, Inject, Injectable, NgZone, Provider } from '@angular/core';\nimport {\n  BehaviorSubject,\n  catchError,\n  filter,\n  firstValueFrom,\n  from,\n  interval,\n  map,\n  Observable,\n  Subject,\n  Subscriber,\n  takeUntil,\n  throwError,\n  timer\n} from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\nimport { MockSerial } from './mock-serial';\n\n@Injectable()\nexport class NgxWebSerial {\n\n  private port: SerialPort | null = null;\n  private abortController: AbortController | null = null;\n  private dataStream: WritableStream | null = null;\n  private dataSubject: Subject<string> = new Subject<string>();\n  private writer: WritableStreamDefaultWriter<Uint8Array> | null = null;\n  private connectedSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  private readonly sink: UnderlyingSink =  {\n    write: (chunk: any) => {\n      this.ngZone.run(() => {\n        this.dataSubject.next(chunk);\n      });\n    }\n  }\n\n  constructor(\n    @Inject('Serial') readonly serial: Serial | undefined,\n    private ngZone: NgZone\n  ) {\n  }\n\n  /**\n   * Establishes a connection to a serial port using the Web Serial API.\n   */\n  open(serialOptions: SerialOptions = { baudRate: 9600 }, options?: SerialPortRequestOptions): Observable<void> {\n    return new Observable<void>((observer: Subscriber<void>) => {\n      if (!this.serial) {\n        observer.error('Web serial not supported.');\n        return;\n      }\n      this.serial.requestPort(options)\n        .then((port: SerialPort) => {\n          this.port = port;\n          return this.port.open(serialOptions);\n        })\n        .then(() => {\n          if (!this.port?.readable || !this.port?.writable) {\n            observer.error('Port is not readable or writable.');\n            return;\n          }\n          this.connectedSubject.next(true);\n          this.abortController = new AbortController();\n          this.dataStream = new WritableStream(this.sink);\n          this.writer = this.port?.writable.getWriter();\n          observer.next();\n          return this.port.readable\n            .pipeThrough(new TextDecoderStream())\n            .pipeTo(this.dataStream, {signal: this.abortController.signal})\n            .catch(() => this.closePort().catch((err) => observer.error(err)));\n        })\n        .catch((err) => observer.error(err))\n        .finally(() => observer.complete());\n    });\n  }\n\n  isConnected(): Observable<boolean> {\n    return this.connectedSubject.asObservable();\n  }\n\n  read(): Observable<string> {\n    return this.dataSubject.asObservable();\n  }\n\n  write(data: string): Observable<void> {\n    if (this.writer) {\n      return from(this.writer.write(new TextEncoder().encode(data)));\n\n    }\n    return throwError(() => new Error('No writer available.'));\n  }\n\n\n  private waitForReadableUnlock(period: number = 50, timeout: number = 5000): Promise<void> {\n    return firstValueFrom(interval(period).pipe(\n      filter(() => !this.port?.readable?.locked),\n      map(() => undefined),\n      takeUntil(timer(timeout)),\n      catchError(() => throwError(() => new Error('Timeout waiting for readable stream to unlock')))\n    ));\n  }\n\n  private closePort(): Promise<void> {\n    this.abortController = null;\n    if (this.writer) {\n      this.writer.releaseLock();\n      this.writer = null;\n    }\n    if (this.port) {\n      return this.waitForReadableUnlock()\n        .then(() => this.port!.close())\n        .then(() => {\n          this.port = null;\n          this.connectedSubject.next(false);\n        });\n    } else {\n      return Promise.resolve();\n    }\n  }\n  close(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n}\n\nexport function provideNgxWebSerial(): Provider[] {\n  return [\n    NgxWebSerial,\n    {\n      provide: 'Serial',\n      useFactory: (document: Document) => document.defaultView?.navigator?.serial,\n      deps: [DOCUMENT]\n    }\n  ];\n}\n\nexport function provideNgxWebSerialTest(responseFunction?: (input: string) => string): Provider[] {\n  return [\n    NgxWebSerial,\n    {\n      provide: 'Serial',\n      useFactory: () => new MockSerial(responseFunction || ((input: string) => input)),\n      deps: []\n    } as FactoryProvider\n  ];\n}\n","/*\n * Public API Surface of ngx-web-serial\n */\n\nexport * from './lib/ngx-web-serial.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;MAAa,UAAU,CAAA;AAIrB,IAAA,WAAA,CAAY,gBAA2C,EAAA;QAH/C,IAAkB,CAAA,kBAAA,GAAuD,IAAI;AAInF,QAAA,IAAI,CAAC,gBAAgB,GAAG,gBAAgB;AACxC,QAAA,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC;AACvC,YAAA,KAAK,EAAE,CAAC,UAAU,KAAI;AACpB,gBAAA,IAAI,CAAC,kBAAkB,GAAG,UAAU;aACrC;YACD,MAAM,EAAE,MAAK;AACX,gBAAA,IAAI,CAAC,kBAAkB,GAAG,IAAI;;AAEjC,SAAA,CAAC;;AAGJ,IAAA,WAAW,CAAC,OAAkC,EAAA;QAC5C,OAAO,OAAO,CAAC,OAAO,CAAC;AACrB,YAAA,IAAI,EAAE,MAAM,OAAO,CAAC,OAAO,EAAE;YAC7B,KAAK,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;YACzC,QAAQ,EAAE,IAAI,CAAC,cAAc;YAC7B,QAAQ,EAAE,IAAI,cAAc,CAAC;AAC3B,gBAAA,KAAK,EAAE,CAAC,KAAK,KAAI;oBACf,MAAM,KAAK,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;oBAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;AAC7C,oBAAA,IAAI,IAAI,CAAC,kBAAkB,EAAE;AAC3B,wBAAA,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;;;aAGxE;AACmB,SAAA,CAAC;;AAE1B;;MCZY,YAAY,CAAA;IAiBvB,WAC6B,CAAA,MAA0B,EAC7C,MAAc,EAAA;QADK,IAAM,CAAA,MAAA,GAAN,MAAM;QACzB,IAAM,CAAA,MAAA,GAAN,MAAM;QAjBR,IAAI,CAAA,IAAA,GAAsB,IAAI;QAC9B,IAAe,CAAA,eAAA,GAA2B,IAAI;QAC9C,IAAU,CAAA,UAAA,GAA0B,IAAI;AACxC,QAAA,IAAA,CAAA,WAAW,GAAoB,IAAI,OAAO,EAAU;QACpD,IAAM,CAAA,MAAA,GAAmD,IAAI;AAC7D,QAAA,IAAA,CAAA,gBAAgB,GAA6B,IAAI,eAAe,CAAU,KAAK,CAAC;AAEvE,QAAA,IAAA,CAAA,IAAI,GAAoB;AACvC,YAAA,KAAK,EAAE,CAAC,KAAU,KAAI;AACpB,gBAAA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAK;AACnB,oBAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;AAC9B,iBAAC,CAAC;;SAEL;;AAQD;;AAEG;IACH,IAAI,CAAC,gBAA+B,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,OAAkC,EAAA;AACxF,QAAA,OAAO,IAAI,UAAU,CAAO,CAAC,QAA0B,KAAI;AACzD,YAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AAChB,gBAAA,QAAQ,CAAC,KAAK,CAAC,2BAA2B,CAAC;gBAC3C;;AAEF,YAAA,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO;AAC5B,iBAAA,IAAI,CAAC,CAAC,IAAgB,KAAI;AACzB,gBAAA,IAAI,CAAC,IAAI,GAAG,IAAI;gBAChB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;AACtC,aAAC;iBACA,IAAI,CAAC,MAAK;AACT,gBAAA,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE;AAChD,oBAAA,QAAQ,CAAC,KAAK,CAAC,mCAAmC,CAAC;oBACnD;;AAEF,gBAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;AAChC,gBAAA,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,EAAE;gBAC5C,IAAI,CAAC,UAAU,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;gBAC/C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,SAAS,EAAE;gBAC7C,QAAQ,CAAC,IAAI,EAAE;AACf,gBAAA,OAAO,IAAI,CAAC,IAAI,CAAC;AACd,qBAAA,WAAW,CAAC,IAAI,iBAAiB,EAAE;AACnC,qBAAA,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,EAAC;qBAC7D,KAAK,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACtE,aAAC;AACA,iBAAA,KAAK,CAAC,CAAC,GAAG,KAAK,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;iBAClC,OAAO,CAAC,MAAM,QAAQ,CAAC,QAAQ,EAAE,CAAC;AACvC,SAAC,CAAC;;IAGJ,WAAW,GAAA;AACT,QAAA,OAAO,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE;;IAG7C,IAAI,GAAA;AACF,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE;;AAGxC,IAAA,KAAK,CAAC,IAAY,EAAA;AAChB,QAAA,IAAI,IAAI,CAAC,MAAM,EAAE;AACf,YAAA,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;QAGhE,OAAO,UAAU,CAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;;AAIpD,IAAA,qBAAqB,CAAC,MAAA,GAAiB,EAAE,EAAE,UAAkB,IAAI,EAAA;QACvE,OAAO,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CACzC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,EAC1C,GAAG,CAAC,MAAM,SAAS,CAAC,EACpB,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EACzB,UAAU,CAAC,MAAM,UAAU,CAAC,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC,CAAC,CAC/F,CAAC;;IAGI,SAAS,GAAA;AACf,QAAA,IAAI,CAAC,eAAe,GAAG,IAAI;AAC3B,QAAA,IAAI,IAAI,CAAC,MAAM,EAAE;AACf,YAAA,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;AACzB,YAAA,IAAI,CAAC,MAAM,GAAG,IAAI;;AAEpB,QAAA,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,OAAO,IAAI,CAAC,qBAAqB;iBAC9B,IAAI,CAAC,MAAM,IAAI,CAAC,IAAK,CAAC,KAAK,EAAE;iBAC7B,IAAI,CAAC,MAAK;AACT,gBAAA,IAAI,CAAC,IAAI,GAAG,IAAI;AAChB,gBAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;AACnC,aAAC,CAAC;;aACC;AACL,YAAA,OAAO,OAAO,CAAC,OAAO,EAAE;;;IAG5B,KAAK,GAAA;AACH,QAAA,IAAI,IAAI,CAAC,eAAe,EAAE;AACxB,YAAA,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE;;;AAtGrB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,YAAY,kBAkBb,QAAQ,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;mHAlBP,YAAY,EAAA,CAAA,CAAA;;4FAAZ,YAAY,EAAA,UAAA,EAAA,CAAA;kBADxB;;0BAmBI,MAAM;2BAAC,QAAQ;;SAyFJ,mBAAmB,GAAA;IACjC,OAAO;QACL,YAAY;AACZ,QAAA;AACE,YAAA,OAAO,EAAE,QAAQ;AACjB,YAAA,UAAU,EAAE,CAAC,QAAkB,KAAK,QAAQ,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM;YAC3E,IAAI,EAAE,CAAC,QAAQ;AAChB;KACF;AACH;AAEM,SAAU,uBAAuB,CAAC,gBAA4C,EAAA;IAClF,OAAO;QACL,YAAY;AACZ,QAAA;AACE,YAAA,OAAO,EAAE,QAAQ;AACjB,YAAA,UAAU,EAAE,MAAM,IAAI,UAAU,CAAC,gBAAgB,KAAK,CAAC,KAAa,KAAK,KAAK,CAAC,CAAC;AAChF,YAAA,IAAI,EAAE;AACY;KACrB;AACH;;ACnJA;;AAEG;;ACFH;;AAEG;;;;"}